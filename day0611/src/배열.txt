<배열> Array
- 자료형이 동일한 데이터들에 같은(한개의) 변수명을 정의한 자료들의 집합.
- 자료형이 동일한 데이터들        ==>조건      
    같은(한개의) 변수명을 정의   ==>특성
    자료들의 집합                      ==>정의
    
    int su1;     -----> 한 개의 정수를 저장할 준비
    int []su2;   -----> 여러개의 정수를 저장할 준비
    
- 서로 데이터들을 구분하기 위해 번지를 사용.
- 시작번지는 0번지 ,  1씩 증가하는 번지를 가짐

- 배열의 크기가 정해지면 인덱스를 벗어나는 참조를 하면 안됨.
  int [] su3 = {10,       20,     30};
      번지 인덱스 --> su3[0]  su3[1]  su3[2]
   ----> 배열의 크기(요소 갯수) : 3 (인덱스 0~2)

  System.out.println(su3[1]);//데이터 사용 (두번째데이터 출력) 
  System.out.println(su3[3]); 
   ===> 에러발생: ArrayIndexOutOfBoundsException !!

  11   22    33
  true   false   true
  "길동"   "라임"   "주원"
  'j'   'a'   'v'   'a'
  
  int su1=11;
  int su2=22;
  int su3=33;
  
  int [] su = { 11,     22,    33  };
   번지(인덱스)    su[0]  su[1]   su[2]
  ---------
  데이터를 구분하기 위해서 사용    
  ==> su라는 배열변수에 복수 데이터를 대입!!
  
  int su; ==> 한개의 데이터 입력
  int []su; ==> 여러개의 데이터 입력!!(배열)
  
  boolean [] b = {true  , false ,  true};
  String [] str = { "길동" ,  "라임" ,  "주원" };
  char []ch ={ 'j' ,  'a',   'v',   'a'}

  <5000 데이터 출력>
  System.out.println(5000);
  
  int su=5000;
  System.out.println(su);
  
  int []suArr={5000};
  System.out.println(suArr[0]);
  
- 배열의 크기(배열의 요소 갯수)를 구하는 속성: 배열명.length!!  (배열은 객체다!!)

- 배열선언시 []는 변수명 앞에 또는 뒤에 붙여도 상관이 없다.
    int []su;
    int su[];    
    
    int i;
    int j;
    int k;               
    ===> int i,j,k;
    
      차이점)
      int su1[],su2;   ---> su1은 int배열, su2는 int변수
      int [] su1,su2;  ---> su1,su2 둘다 int배열!!

     참고)
     class A{
         int i; //기본값 존재O
     
         void hello(){
            int j; //기본값 존재X
            System.out.println(i); //출력?  0
            
            System.out.println(j); //출력? (초기화하지 않았다는)에러발생   
            j=0;
            System.out.println(j); //출력? 0
            
            int a,b,c=0;
            System.out.println(c); //출력? 0 
            
            System.out.println(a); //출력? (초기화하지 않았다는)에러발생
            System.out.println(b); //출력? (초기화하지 않았다는)에러발생
             
            ==> int a=0,b=0,c=0;  //각각 초기화
            System.out.println(c); //출력? 0            
            System.out.println(a); //출력? 0
            System.out.println(b); //출력? 0
         }//hello     
     }
     
     
<배열 형식>     
1. 자료형[] 배열명 = { 데이터List(콤마로 구분되는 데이터)  };
  ---> 배열선언과 동시에 데이터를 초기화.(이미 데이터가 확정되었을때 사용)
  ---> ※주의: 배열선언과 데이터 초기화하는 부분을 따로 작성할 수 없음!!
  
  int [] su;//배열선언
         su = {1,2,3,4,5}; //배열초기화   (X)
  
  int []su = {1,2,3,4,5}; //선언과 초기화 (O)
  
  A a = new A();
   A []su2 = { a,  new A(), new A() };

2. 자료형[] 배열명 = new 자료형[배열크기]; //배열객체생성식 : 암기
  ---> 프로그램 실행 도중 데이터 값을 입력할때(변경할때) 주로 사용.
        ==> 데이터가 정해지지 않고 앞으로 입력받을 데이터들이 저장될 방(공간)만 준비.  
  ---> 배열선언과 데이터 초기화하는 부분을 따로 작성하는 것이 가능.
  ---> 배열크기[]는 반드시 자료형 뒤에 위치해야 함.
  ---> 배열크기에 정수값이 반드시 입력되어야함.

  int []su; //배열선언
        su = new int[5]; //배열초기화  (su배열변수에 5개의 정수를 입력받겠음, 빈방 5개 생성)
  ==> int []su = new int[5];       
           
  ==> 데이터 입력:   su[0]=11;             
                  su[1]=22;
                  su[2]=33;
                  su[3]=44;
                  su[4]=55;
                  
                  su[5]=66; ==> 인덱스를 벗어났으므로 에러
                  
※배열 객체생성(위의 2번) 을 하게 되면 그 위치에 상관없이 각방에는 초기값이 부여됨.
 (멤버변수 처럼 각 자료형의 기본값이 입력됨)        

========================================================================
<2차원 배열>
 - 실제 저장은 1차원 배열과 같으나
     논리적으로 데이터를 행과 열의 형태로 저장한다고 생각 표현.
     
 - 행사이즈는 반드시 기술해야 함.
     열사이즈는 생략하는 것이 가능.
     
   //배열선언  
   int [][]su;  
   int su[][];  
   int []su[];
                     0행            1행
                   -------       --------   
   int [][]su = {  {1, 2, 3}   ,  {4, 5, 6}  };  
                    ------        ---------
                 열:0  1  2     열: 0  1  2
                                
                 System.out.println(su[0][2]);//0행2열 데이터 ==> 3                              
                 System.out.println(su[1][1]);//1행1열 데이터 ==> 5
                 
         su.length ===> 행의 갯수 ===> 2        
         su[0].length ==> 0행의 열의 갯수 ==> 3
         su[1].length ==> 1행의 열의 갯수 ==> 3
                 
   ==> for(int i=0; i<su.length; i++){ //기준(행): 행의 인덱스 표현 0,1
         for(int j=0; j<su[i].length; j++ ){//각행의 열 인덱스 : 0 1 2
            System.out.println(  su[i][j]  ); //==> su배열 i행 j열
         }
       }                                  
                                
                              