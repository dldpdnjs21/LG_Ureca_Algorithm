<interface> 인터페이스   
   형식)
      interface 인터페이스명
      {
          //필드          
         [고정 public static final] int su;
         //생략,고정되어있음
         //private,protected 사용 X
          
          //선언된 메서드
         [고정 public abstract] void print();
      }
   
     interface A{
           int su;
           void print();
    }

<interface> 예) JDBC(Java DataBase Connectivity) 

  ----> 저장: 인터페이스명.java    ----컴파일---->   인터페이스명.class    
   
  - interface의 구성멤버는 필드, 선언된 메서드로만 구성.
     void print(){
     
     }  -----> 정의된 메서드, 구현된 메서드!!
     
     void print();  ----> 선언된 메서드 (바디없는, 영역괄호 없는 메서드)
     
  <손님의 입장>   
  - 서로 다른 제품에 연결할 수 있는 공통 연결 모듈을 의미.
    
  <요리사의 입장(객체를 생성하는 곳)>  
  - 클래스에 다중 상속을 구현할 수 있다.
     - ★ 인터페이스는 어떻게 사용? 클래스에 구현해서 사용!!
                              ---
                                    키워드:  implements         
  
  
   class 클래스명     implements    인터페이스명{
         ------     ----------   ---------- 
          주방        구현의 약속       메뉴판
   
   } 
  
==================================================
<클래스와 인터페이스 간의 상속문법>

class A{}

class B extends A{//extends 뒤에는 상속 받고자 하는 한개의 클래스명만 정의!!
       ---------
       //확장 (자식클래스를 확장클래스!!)

}
---------------------------------------------------------------
interface A{}
interface B{}

class C implements A,B{// A와 B인터페이스내의 선언된 메서드를 C클래스에서 전부 구현!!
        //구현의 약속
}
---------------------------------------------------------------
interface A{}
class B{}

class C implements A  extends  B { 
   //에러발생: 클래스와 인터페이스를 동시에 상속할 때는 클래스 먼저, 인터페이스 나중
   //implements가 먼저 나오면 컴파일러가 extends Object를 implements키워드 앞에 추가해줌!! 
} ---> (X)

class C extends  B  implements A  {
 
} ---> (O)
---------------------------------------------------------------
interface A { void hello(); }
interface B { void hi(); }

interface C  extends  A,B{
   void good();
}
---------------------------------------------------------------
class A {  void  hello(){}   }

interface B         A{

} ----> 말이 안됨!!


==================================================
<final>
1. final 자료형 변수명;
   ----> 마지막 변수  : 상수(constant)
   ----> 상수의 식별을 위해 전체 대문자로 표기.
   
     예) final int MAX=100;
          MAX++; ===> 101 : 에러발생 
   
2. final 리턴형 메서드명() {}
   ---> 마지막 메서드 : 오버라이딩(메소드 재정의) 할 수 없는 메서드.

3. final class 클래스명{}
   ---> 마지막 클래스 : 자식클래스를 갖지 않는 클래스
   ---> 완벽한 클래스(자식통한 기능확장을 원치 않는다)
   ---> 보안

================================================================================================
<추상클래스> abstract class
- 후손 class를 제어할 목적으로 사용.
- 객체화 될 수 없는 클래스
- 구현(정의)된 메서드와 선언된 메서드로 구성.
- 스스로 객체생성 불가(new 사용X), 후손class 객체생성(자식은 부모다!!)해서 사용.

형식)
  abstract class 클래스명{
      //필드선언    
      
      public void hello(){}//구현된(정의된) 메서드
      abstract void print();//선언된 메서드
      ※주의: 선언된 메서드를 사용하는 경우 반드시 abstract 명시!!
      
  }

 <오버라이딩(메서드 재정의)> 
 규칙1) 접근제한자는 부모와 같거나 확장되어야 함 
     부모: 디폴트             ==> 자식: 디폴트,protected,public
     부모: protected   ==> 자식: protected,public
     부모: public      ==> 자식: public
 규칙2) throws 예외클래스는 부모와 같거나 축소되어야 함


미션) BufferedReader클래스의 readLine()메서드를 호출하시오.
            A                hello()
     
     //BufferedReader(Reader in)
     BufferedReader br = new Bu 
            

<자바 I/O 4대 클래스> ==> 추상클래스로 정의!!
==> Stream (시내) :  연속된 바이트의 흐름.
          
                     읽기(read())        쓰기(write())
         ---------------------------------------
byte단위       InputStream         OutputStream 
문자단위           Reader               Writer


class 기본클래스                    class 추상클래스                  interface 인터페이스
{                         {                     {
  //정의(구현)된 메서드만!!       //선언된 메서드                   //선언된 메서드만!!  
  void hello(){}            void hello();          void hello();
                             //정의 메서드                             
                            void goodBye(){}
}                         }


================================  <정리>   ===================================  
class 기본클래스                   abstract class 추상클래스                  interface 인터페이스
{                         {                             {
  //정의(구현)된 메서드만!!       //선언된 메서드                             //선언된 메서드만!!  
  void hello(){}            abstract void hello();          void hello();
                             //정의 메서드                             
                            void goodBye(){}
}                         }                              }
  

==> JDK8버전부터 인터페이스에 default 또는 static 을 사용하여 정의된 메서드 사용이 가능해짐~!!
==> default는 자식클래스에 상속되면 Overring가능!!
      static의 경우에는 상속이 되지 않는다(@Override)

인터페이스에서 메서드 public abstract는 생략의 의미보다는 '고정'의 값입니다!!
==> 명시하지 않아도 명시한 것과 같다!! 
interface My{   void hello();   }  ==> public abstract void hello();의 의미
interface My{   abstract void hello();   }  ==> public abstract void hello();의 의미
interface My{   public abstract void hello();   }  ==> public abstract void hello();의 의미
이와 같이 인터페이스에는 선언된 메서드만 들어갈수 있고 무조건 public abstract가 있는것과 같다!!

단, JDK8버전 이후에는 바디({ }) 가 있는 메서드가 추가되어 abstract(선언된 메서드)와 구분되어집니다.
여전히 public은 '고정'입니다.
그러나 default 또는 static 이 있다면  '{ }'괄호를 사용하는 것이 가능합니다.
interface My{  default void good( ){ }   }  ==> public default void good( ){ }  의 의미
interface My{  static void ssafy( ){ }   }  ==> public static void ssafy( ){ }  의 의미

